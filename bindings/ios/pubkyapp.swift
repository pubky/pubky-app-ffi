// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(pubkyappFFI)
import pubkyappFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_pubkyapp_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_pubkyapp_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
                throw CancellationError()

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public protocol EventNotifierProtocol {
    
}

public class EventNotifier: EventNotifierProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { uniffi_pubkyapp_fn_free_eventnotifier(pointer, $0) }
    }

    

    
    
}

public struct FfiConverterTypeEventNotifier: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = EventNotifier

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EventNotifier {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: EventNotifier, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> EventNotifier {
        return EventNotifier(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: EventNotifier) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public func FfiConverterTypeEventNotifier_lift(_ pointer: UnsafeMutableRawPointer) throws -> EventNotifier {
    return try FfiConverterTypeEventNotifier.lift(pointer)
}

public func FfiConverterTypeEventNotifier_lower(_ value: EventNotifier) -> UnsafeMutableRawPointer {
    return FfiConverterTypeEventNotifier.lower(value)
}


public struct Capability {
    public var path: String
    public var permission: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(path: String, permission: String) {
        self.path = path
        self.permission = permission
    }
}


extension Capability: Equatable, Hashable {
    public static func ==(lhs: Capability, rhs: Capability) -> Bool {
        if lhs.path != rhs.path {
            return false
        }
        if lhs.permission != rhs.permission {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(path)
        hasher.combine(permission)
    }
}


public struct FfiConverterTypeCapability: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Capability {
        return try Capability(
            path: FfiConverterString.read(from: &buf), 
            permission: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: Capability, into buf: inout [UInt8]) {
        FfiConverterString.write(value.path, into: &buf)
        FfiConverterString.write(value.permission, into: &buf)
    }
}


public func FfiConverterTypeCapability_lift(_ buf: RustBuffer) throws -> Capability {
    return try FfiConverterTypeCapability.lift(buf)
}

public func FfiConverterTypeCapability_lower(_ value: Capability) -> RustBuffer {
    return FfiConverterTypeCapability.lower(value)
}


public struct PostEmbed {
    public var kind: PostKind
    public var uri: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(kind: PostKind, uri: String) {
        self.kind = kind
        self.uri = uri
    }
}


extension PostEmbed: Equatable, Hashable {
    public static func ==(lhs: PostEmbed, rhs: PostEmbed) -> Bool {
        if lhs.kind != rhs.kind {
            return false
        }
        if lhs.uri != rhs.uri {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(kind)
        hasher.combine(uri)
    }
}


public struct FfiConverterTypePostEmbed: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PostEmbed {
        return try PostEmbed(
            kind: FfiConverterTypePostKind.read(from: &buf), 
            uri: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PostEmbed, into buf: inout [UInt8]) {
        FfiConverterTypePostKind.write(value.kind, into: &buf)
        FfiConverterString.write(value.uri, into: &buf)
    }
}


public func FfiConverterTypePostEmbed_lift(_ buf: RustBuffer) throws -> PostEmbed {
    return try FfiConverterTypePostEmbed.lift(buf)
}

public func FfiConverterTypePostEmbed_lower(_ value: PostEmbed) -> RustBuffer {
    return FfiConverterTypePostEmbed.lower(value)
}


public struct PubkyAppFile {
    public var name: String
    public var createdAt: Int64
    public var src: String
    public var contentType: String
    public var size: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, createdAt: Int64, src: String, contentType: String, size: Int64) {
        self.name = name
        self.createdAt = createdAt
        self.src = src
        self.contentType = contentType
        self.size = size
    }
}


extension PubkyAppFile: Equatable, Hashable {
    public static func ==(lhs: PubkyAppFile, rhs: PubkyAppFile) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        if lhs.src != rhs.src {
            return false
        }
        if lhs.contentType != rhs.contentType {
            return false
        }
        if lhs.size != rhs.size {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(createdAt)
        hasher.combine(src)
        hasher.combine(contentType)
        hasher.combine(size)
    }
}


public struct FfiConverterTypePubkyAppFile: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PubkyAppFile {
        return try PubkyAppFile(
            name: FfiConverterString.read(from: &buf), 
            createdAt: FfiConverterInt64.read(from: &buf), 
            src: FfiConverterString.read(from: &buf), 
            contentType: FfiConverterString.read(from: &buf), 
            size: FfiConverterInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PubkyAppFile, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterInt64.write(value.createdAt, into: &buf)
        FfiConverterString.write(value.src, into: &buf)
        FfiConverterString.write(value.contentType, into: &buf)
        FfiConverterInt64.write(value.size, into: &buf)
    }
}


public func FfiConverterTypePubkyAppFile_lift(_ buf: RustBuffer) throws -> PubkyAppFile {
    return try FfiConverterTypePubkyAppFile.lift(buf)
}

public func FfiConverterTypePubkyAppFile_lower(_ value: PubkyAppFile) -> RustBuffer {
    return FfiConverterTypePubkyAppFile.lower(value)
}


public struct PubkyAppFollow {
    public var createdAt: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(createdAt: Int64) {
        self.createdAt = createdAt
    }
}


extension PubkyAppFollow: Equatable, Hashable {
    public static func ==(lhs: PubkyAppFollow, rhs: PubkyAppFollow) -> Bool {
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(createdAt)
    }
}


public struct FfiConverterTypePubkyAppFollow: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PubkyAppFollow {
        return try PubkyAppFollow(
            createdAt: FfiConverterInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PubkyAppFollow, into buf: inout [UInt8]) {
        FfiConverterInt64.write(value.createdAt, into: &buf)
    }
}


public func FfiConverterTypePubkyAppFollow_lift(_ buf: RustBuffer) throws -> PubkyAppFollow {
    return try FfiConverterTypePubkyAppFollow.lift(buf)
}

public func FfiConverterTypePubkyAppFollow_lower(_ value: PubkyAppFollow) -> RustBuffer {
    return FfiConverterTypePubkyAppFollow.lower(value)
}


public struct PubkyAppPost {
    public var content: String
    public var kind: PostKind
    public var parent: String?
    public var embed: PostEmbed?
    public var attachments: [String]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(content: String, kind: PostKind, parent: String?, embed: PostEmbed?, attachments: [String]?) {
        self.content = content
        self.kind = kind
        self.parent = parent
        self.embed = embed
        self.attachments = attachments
    }
}


extension PubkyAppPost: Equatable, Hashable {
    public static func ==(lhs: PubkyAppPost, rhs: PubkyAppPost) -> Bool {
        if lhs.content != rhs.content {
            return false
        }
        if lhs.kind != rhs.kind {
            return false
        }
        if lhs.parent != rhs.parent {
            return false
        }
        if lhs.embed != rhs.embed {
            return false
        }
        if lhs.attachments != rhs.attachments {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(content)
        hasher.combine(kind)
        hasher.combine(parent)
        hasher.combine(embed)
        hasher.combine(attachments)
    }
}


public struct FfiConverterTypePubkyAppPost: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PubkyAppPost {
        return try PubkyAppPost(
            content: FfiConverterString.read(from: &buf), 
            kind: FfiConverterTypePostKind.read(from: &buf), 
            parent: FfiConverterOptionString.read(from: &buf), 
            embed: FfiConverterOptionTypePostEmbed.read(from: &buf), 
            attachments: FfiConverterOptionSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: PubkyAppPost, into buf: inout [UInt8]) {
        FfiConverterString.write(value.content, into: &buf)
        FfiConverterTypePostKind.write(value.kind, into: &buf)
        FfiConverterOptionString.write(value.parent, into: &buf)
        FfiConverterOptionTypePostEmbed.write(value.embed, into: &buf)
        FfiConverterOptionSequenceString.write(value.attachments, into: &buf)
    }
}


public func FfiConverterTypePubkyAppPost_lift(_ buf: RustBuffer) throws -> PubkyAppPost {
    return try FfiConverterTypePubkyAppPost.lift(buf)
}

public func FfiConverterTypePubkyAppPost_lower(_ value: PubkyAppPost) -> RustBuffer {
    return FfiConverterTypePubkyAppPost.lower(value)
}


public struct PubkyAppTag {
    public var uri: String
    public var label: String
    public var createdAt: Int64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(uri: String, label: String, createdAt: Int64) {
        self.uri = uri
        self.label = label
        self.createdAt = createdAt
    }
}


extension PubkyAppTag: Equatable, Hashable {
    public static func ==(lhs: PubkyAppTag, rhs: PubkyAppTag) -> Bool {
        if lhs.uri != rhs.uri {
            return false
        }
        if lhs.label != rhs.label {
            return false
        }
        if lhs.createdAt != rhs.createdAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(uri)
        hasher.combine(label)
        hasher.combine(createdAt)
    }
}


public struct FfiConverterTypePubkyAppTag: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PubkyAppTag {
        return try PubkyAppTag(
            uri: FfiConverterString.read(from: &buf), 
            label: FfiConverterString.read(from: &buf), 
            createdAt: FfiConverterInt64.read(from: &buf)
        )
    }

    public static func write(_ value: PubkyAppTag, into buf: inout [UInt8]) {
        FfiConverterString.write(value.uri, into: &buf)
        FfiConverterString.write(value.label, into: &buf)
        FfiConverterInt64.write(value.createdAt, into: &buf)
    }
}


public func FfiConverterTypePubkyAppTag_lift(_ buf: RustBuffer) throws -> PubkyAppTag {
    return try FfiConverterTypePubkyAppTag.lift(buf)
}

public func FfiConverterTypePubkyAppTag_lower(_ value: PubkyAppTag) -> RustBuffer {
    return FfiConverterTypePubkyAppTag.lower(value)
}


public struct PubkyAppUser {
    public var name: String
    public var bio: String?
    public var image: String?
    public var links: [UserLink]?
    public var status: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(name: String, bio: String?, image: String?, links: [UserLink]?, status: String?) {
        self.name = name
        self.bio = bio
        self.image = image
        self.links = links
        self.status = status
    }
}


extension PubkyAppUser: Equatable, Hashable {
    public static func ==(lhs: PubkyAppUser, rhs: PubkyAppUser) -> Bool {
        if lhs.name != rhs.name {
            return false
        }
        if lhs.bio != rhs.bio {
            return false
        }
        if lhs.image != rhs.image {
            return false
        }
        if lhs.links != rhs.links {
            return false
        }
        if lhs.status != rhs.status {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(bio)
        hasher.combine(image)
        hasher.combine(links)
        hasher.combine(status)
    }
}


public struct FfiConverterTypePubkyAppUser: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PubkyAppUser {
        return try PubkyAppUser(
            name: FfiConverterString.read(from: &buf), 
            bio: FfiConverterOptionString.read(from: &buf), 
            image: FfiConverterOptionString.read(from: &buf), 
            links: FfiConverterOptionSequenceTypeUserLink.read(from: &buf), 
            status: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: PubkyAppUser, into buf: inout [UInt8]) {
        FfiConverterString.write(value.name, into: &buf)
        FfiConverterOptionString.write(value.bio, into: &buf)
        FfiConverterOptionString.write(value.image, into: &buf)
        FfiConverterOptionSequenceTypeUserLink.write(value.links, into: &buf)
        FfiConverterOptionString.write(value.status, into: &buf)
    }
}


public func FfiConverterTypePubkyAppUser_lift(_ buf: RustBuffer) throws -> PubkyAppUser {
    return try FfiConverterTypePubkyAppUser.lift(buf)
}

public func FfiConverterTypePubkyAppUser_lower(_ value: PubkyAppUser) -> RustBuffer {
    return FfiConverterTypePubkyAppUser.lower(value)
}


public struct PubkyAuthDetails {
    public var relay: String
    public var capabilities: [Capability]
    public var secret: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(relay: String, capabilities: [Capability], secret: String) {
        self.relay = relay
        self.capabilities = capabilities
        self.secret = secret
    }
}


extension PubkyAuthDetails: Equatable, Hashable {
    public static func ==(lhs: PubkyAuthDetails, rhs: PubkyAuthDetails) -> Bool {
        if lhs.relay != rhs.relay {
            return false
        }
        if lhs.capabilities != rhs.capabilities {
            return false
        }
        if lhs.secret != rhs.secret {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(relay)
        hasher.combine(capabilities)
        hasher.combine(secret)
    }
}


public struct FfiConverterTypePubkyAuthDetails: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PubkyAuthDetails {
        return try PubkyAuthDetails(
            relay: FfiConverterString.read(from: &buf), 
            capabilities: FfiConverterSequenceTypeCapability.read(from: &buf), 
            secret: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: PubkyAuthDetails, into buf: inout [UInt8]) {
        FfiConverterString.write(value.relay, into: &buf)
        FfiConverterSequenceTypeCapability.write(value.capabilities, into: &buf)
        FfiConverterString.write(value.secret, into: &buf)
    }
}


public func FfiConverterTypePubkyAuthDetails_lift(_ buf: RustBuffer) throws -> PubkyAuthDetails {
    return try FfiConverterTypePubkyAuthDetails.lift(buf)
}

public func FfiConverterTypePubkyAuthDetails_lower(_ value: PubkyAuthDetails) -> RustBuffer {
    return FfiConverterTypePubkyAuthDetails.lower(value)
}


public struct UserLink {
    public var title: String
    public var url: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(title: String, url: String) {
        self.title = title
        self.url = url
    }
}


extension UserLink: Equatable, Hashable {
    public static func ==(lhs: UserLink, rhs: UserLink) -> Bool {
        if lhs.title != rhs.title {
            return false
        }
        if lhs.url != rhs.url {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(title)
        hasher.combine(url)
    }
}


public struct FfiConverterTypeUserLink: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserLink {
        return try UserLink(
            title: FfiConverterString.read(from: &buf), 
            url: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: UserLink, into buf: inout [UInt8]) {
        FfiConverterString.write(value.title, into: &buf)
        FfiConverterString.write(value.url, into: &buf)
    }
}


public func FfiConverterTypeUserLink_lift(_ buf: RustBuffer) throws -> UserLink {
    return try FfiConverterTypeUserLink.lift(buf)
}

public func FfiConverterTypeUserLink_lower(_ value: UserLink) -> RustBuffer {
    return FfiConverterTypeUserLink.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum PostKind {
    
    case short
    case long
    case image
    case video
    case link
    case file
}

public struct FfiConverterTypePostKind: FfiConverterRustBuffer {
    typealias SwiftType = PostKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> PostKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .short
        
        case 2: return .long
        
        case 3: return .image
        
        case 4: return .video
        
        case 5: return .link
        
        case 6: return .file
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: PostKind, into buf: inout [UInt8]) {
        switch value {
        
        
        case .short:
            writeInt(&buf, Int32(1))
        
        
        case .long:
            writeInt(&buf, Int32(2))
        
        
        case .image:
            writeInt(&buf, Int32(3))
        
        
        case .video:
            writeInt(&buf, Int32(4))
        
        
        case .link:
            writeInt(&buf, Int32(5))
        
        
        case .file:
            writeInt(&buf, Int32(6))
        
        }
    }
}


public func FfiConverterTypePostKind_lift(_ buf: RustBuffer) throws -> PostKind {
    return try FfiConverterTypePostKind.lift(buf)
}

public func FfiConverterTypePostKind_lower(_ value: PostKind) -> RustBuffer {
    return FfiConverterTypePostKind.lower(value)
}


extension PostKind: Equatable, Hashable {}



fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate typealias UniFFICallbackHandle = UInt64
fileprivate class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for EventListener Callback Interface

public protocol EventListener : AnyObject {
    func onEventOccurred(eventData: String) 
    
}

// The ForeignCallback that is passed to Rust.
fileprivate let foreignCallbackCallbackInterfaceEventListener : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
    

    func invokeOnEventOccurred(_ swiftCallbackInterface: EventListener, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            try swiftCallbackInterface.onEventOccurred(
                    eventData:  try FfiConverterString.read(from: &reader)
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }


    switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceEventListener.drop(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            let cb: EventListener
            do {
                cb = try FfiConverterCallbackInterfaceEventListener.lift(handle)
            } catch {
                out_buf.pointee = FfiConverterString.lower("EventListener: Invalid handle")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeOnEventOccurred(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        
        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceEventListener {
    private static let initCallbackOnce: () = {
        // Swift ensures this initializer code will once run once, even when accessed by multiple threads.
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
            uniffi_pubkyapp_fn_init_callback_eventlistener(foreignCallbackCallbackInterfaceEventListener, err)
        }
    }()

    private static func ensureCallbackinitialized() {
        _ = initCallbackOnce
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<EventListener>()
}

extension FfiConverterCallbackInterfaceEventListener : FfiConverter {
    typealias SwiftType = EventListener
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized();
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized();
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized();
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized();
        writeInt(&buf, lower(v))
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypePostEmbed: FfiConverterRustBuffer {
    typealias SwiftType = PostEmbed?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypePostEmbed.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypePostEmbed.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceTypeUserLink: FfiConverterRustBuffer {
    typealias SwiftType = [UserLink]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeUserLink.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeUserLink.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeCapability: FfiConverterRustBuffer {
    typealias SwiftType = [Capability]

    public static func write(_ value: [Capability], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeCapability.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Capability] {
        let len: Int32 = try readInt(&buf)
        var seq = [Capability]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeCapability.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeUserLink: FfiConverterRustBuffer {
    typealias SwiftType = [UserLink]

    public static func write(_ value: [UserLink], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeUserLink.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UserLink] {
        let len: Int32 = try readInt(&buf)
        var seq = [UserLink]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeUserLink.read(from: &buf))
        }
        return seq
    }
}

public func auth(url: String, secretKey: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_auth(
        FfiConverterString.lower(url),
        FfiConverterString.lower(secretKey),$0)
}
    )
}

public func cleanupFile(pubky: String, fileId: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_cleanup_file(
        FfiConverterString.lower(pubky),
        FfiConverterString.lower(fileId),$0)
}
    )
}

public func cleanupPost(pubky: String, postId: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_cleanup_post(
        FfiConverterString.lower(pubky),
        FfiConverterString.lower(postId),$0)
}
    )
}

public func cleanupUser(pubky: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_cleanup_user(
        FfiConverterString.lower(pubky),$0)
}
    )
}

public func createBookmark(pubky: String, postId: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_create_bookmark(
        FfiConverterString.lower(pubky),
        FfiConverterString.lower(postId),$0)
}
    )
}

public func createFile(pubky: String, file: PubkyAppFile)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_create_file(
        FfiConverterString.lower(pubky),
        FfiConverterTypePubkyAppFile.lower(file),$0)
}
    )
}

public func createFollow(followerPubky: String, followeePubky: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_create_follow(
        FfiConverterString.lower(followerPubky),
        FfiConverterString.lower(followeePubky),$0)
}
    )
}

public func createPost(userId: String, post: PubkyAppPost)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_create_post(
        FfiConverterString.lower(userId),
        FfiConverterTypePubkyAppPost.lower(post),$0)
}
    )
}

public func createRecoveryFile(secretKey: String, passphrase: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_create_recovery_file(
        FfiConverterString.lower(secretKey),
        FfiConverterString.lower(passphrase),$0)
}
    )
}

public func createTag(pubky: String, label: String, postId: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_create_tag(
        FfiConverterString.lower(pubky),
        FfiConverterString.lower(label),
        FfiConverterString.lower(postId),$0)
}
    )
}

public func createUser(secretKey: String, user: PubkyAppUser, homeserver: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_create_user(
        FfiConverterString.lower(secretKey),
        FfiConverterTypePubkyAppUser.lower(user),
        FfiConverterString.lower(homeserver),$0)
}
    )
}

public func decryptRecoveryFile(recoveryFile: String, passphrase: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_decrypt_recovery_file(
        FfiConverterString.lower(recoveryFile),
        FfiConverterString.lower(passphrase),$0)
}
    )
}

public func deleteBookmark(bookmarkUrl: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_delete_bookmark(
        FfiConverterString.lower(bookmarkUrl),$0)
}
    )
}

public func deleteFile(url: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_delete_file(
        FfiConverterString.lower(url),$0)
}
    )
}

public func deleteFollow(followUrl: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_delete_follow(
        FfiConverterString.lower(followUrl),$0)
}
    )
}

public func deleteTag(tagUrl: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_delete_tag(
        FfiConverterString.lower(tagUrl),$0)
}
    )
}

public func generateSecretKey()  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_generate_secret_key($0)
}
    )
}

public func get(url: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_get(
        FfiConverterString.lower(url),$0)
}
    )
}

public func getPublicKeyFromSecretKey(secretKey: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_get_public_key_from_secret_key(
        FfiConverterString.lower(secretKey),$0)
}
    )
}

public func list(url: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_list(
        FfiConverterString.lower(url),$0)
}
    )
}

public func parseAuthUrl(url: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_parse_auth_url(
        FfiConverterString.lower(url),$0)
}
    )
}

public func publish(recordName: String, recordContent: String, secretKey: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_publish(
        FfiConverterString.lower(recordName),
        FfiConverterString.lower(recordContent),
        FfiConverterString.lower(secretKey),$0)
}
    )
}

public func publishHttps(recordName: String, target: String, secretKey: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_publish_https(
        FfiConverterString.lower(recordName),
        FfiConverterString.lower(target),
        FfiConverterString.lower(secretKey),$0)
}
    )
}

public func put(url: String, content: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_put(
        FfiConverterString.lower(url),
        FfiConverterString.lower(content),$0)
}
    )
}

public func removeEventListener()  {
    try! rustCall() {
    uniffi_pubkyapp_fn_func_remove_event_listener($0)
}
}



public func resolve(publicKey: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_resolve(
        FfiConverterString.lower(publicKey),$0)
}
    )
}

public func resolveHttps(publicKey: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_resolve_https(
        FfiConverterString.lower(publicKey),$0)
}
    )
}

public func session(pubky: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_session(
        FfiConverterString.lower(pubky),$0)
}
    )
}

public func setEventListener(listener: EventListener)  {
    try! rustCall() {
    uniffi_pubkyapp_fn_func_set_event_listener(
        FfiConverterCallbackInterfaceEventListener.lower(listener),$0)
}
}



public func signIn(secretKey: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_sign_in(
        FfiConverterString.lower(secretKey),$0)
}
    )
}

public func signOut(secretKey: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_sign_out(
        FfiConverterString.lower(secretKey),$0)
}
    )
}

public func signUp(secretKey: String, homeserver: String)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_sign_up(
        FfiConverterString.lower(secretKey),
        FfiConverterString.lower(homeserver),$0)
}
    )
}

public func switchNetwork(useTestnet: Bool)  -> [String] {
    return try!  FfiConverterSequenceString.lift(
        try! rustCall() {
    uniffi_pubkyapp_fn_func_switch_network(
        FfiConverterBool.lower(useTestnet),$0)
}
    )
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 24
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_pubkyapp_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_pubkyapp_checksum_func_auth() != 9084) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_cleanup_file() != 63098) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_cleanup_post() != 16478) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_cleanup_user() != 47619) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_create_bookmark() != 7666) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_create_file() != 37619) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_create_follow() != 46035) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_create_post() != 21748) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_create_recovery_file() != 29107) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_create_tag() != 64775) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_create_user() != 45704) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_decrypt_recovery_file() != 20619) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_delete_bookmark() != 26382) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_delete_file() != 9083) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_delete_follow() != 804) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_delete_tag() != 59251) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_generate_secret_key() != 41008) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_get() != 30141) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_get_public_key_from_secret_key() != 7747) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_list() != 31116) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_parse_auth_url() != 23625) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_publish() != 61382) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_publish_https() != 4611) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_put() != 38895) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_remove_event_listener() != 62705) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_resolve() != 11786) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_resolve_https() != 24919) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_session() != 47645) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_set_event_listener() != 57085) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_sign_in() != 41711) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_sign_out() != 27123) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_sign_up() != 17971) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_func_switch_network() != 13525) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_pubkyapp_checksum_method_eventlistener_on_event_occurred() != 31412) {
        return InitializationResult.apiChecksumMismatch
    }

    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}